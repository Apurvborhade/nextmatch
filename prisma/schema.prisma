generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(uuid())
  name         String
  email        String         @unique
  password     String
  role         Role?          @default(USER)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  age          Int?
  bio          String?
  position     String?
  Notification Notification[]
  skills       Skill?
  Team         Team[]
  teams        Team[]         @relation("TeamUsers")
}

model Skill {
  id        String @id @default(uuid())
  userId    String @unique
  dribbling Int
  passing   Int
  shooting  Int
  defending Int
  speed     Int
  user      User   @relation(fields: [userId], references: [id])
}

model Team {
  id                   String         @id @default(uuid())
  name                 String         @unique
  captainId            String
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  achievement          Achievement[]
  matchesAsTeam1       Match[]        @relation("Team1Matches")
  matchesAsTeam2       Match[]        @relation("Team2Matches")
  MatchRequestReceiver MatchRequest[] @relation("Receiver")
  MatchRequestSender   MatchRequest[] @relation("Sender")
  captain              User           @relation(fields: [captainId], references: [id])
  players              User[]         @relation("TeamUsers")
}

model Achievement {
  id        String   @id @default(uuid())
  title     String
  date      DateTime
  teamId    String
  createdAt DateTime @default(now())
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

model Match {
  id           String         @id @default(uuid())
  team1Id      String?
  team2Id      String?
  date         DateTime
  location     String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  status       MatchStatus    @default(active)
  team1        Team?          @relation("Team1Matches", fields: [team1Id], references: [id])
  team2        Team?          @relation("Team2Matches", fields: [team2Id], references: [id])
  MatchRequest MatchRequest[]
  Turf         Turf[]         @relation("MatchToTurf")
}

model Turf {
  id        String   @id @default(uuid())
  name      String   @unique
  location  String
  capacity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  matches   Match[]  @relation("MatchToTurf")
}

model MatchRequest {
  id         String        @id @default(uuid())
  senderId   String
  receiverId String
  matchId    String
  createdAt  DateTime      @default(now())
  status     RequestStatus @default(PENDING)
  message    String?
  match      Match         @relation(fields: [matchId], references: [id])
  receiver   Team          @relation("Receiver", fields: [receiverId], references: [id])
  sender     Team          @relation("Sender", fields: [senderId], references: [id])
}

model Notification {
  id          String @id @default(uuid())
  title       String
  description String
  userId      String
  user        User   @relation(fields: [userId], references: [id])
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum Role {
  USER
  ADMIN
}

enum MatchStatus {
  active
  completed
}
